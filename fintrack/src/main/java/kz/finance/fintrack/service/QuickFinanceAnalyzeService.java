package kz.finance.fintrack.service;

import kz.finance.fintrack.dto.ai.FinanceAnalyzeResponse;
import kz.finance.fintrack.model.TransactionEntity;
import kz.finance.fintrack.model.TransactionType;
import kz.finance.fintrack.model.UserEntity;
import kz.finance.fintrack.repository.TransactionRepository;
import kz.finance.fintrack.utils.CurrencyUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.YearMonth;
import java.time.format.TextStyle;
import java.util.*;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class QuickFinanceAnalyzeService {

    private final UserService userService;
    private final TransactionRepository transactionRepository;
    private final Random rnd = new SecureRandom();

    private static final List<String> GREETINGS = List.of(
            "–í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∏—Ç–æ–≥ –∑–∞ %s %d!",
            "–í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä –∑–∞ %s %d:",
            "–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ %s %d:",
            "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∏—Ç–æ–≥ –∑–∞ %s %d ‚Äî —Å–º–æ—Ç—Ä–∏–º –≤–º–µ—Å—Ç–µ!"
    );
    private static final List<String> BALANCE_COMMENTS = List.of(
            "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –≤–∞—à –±–∞–ª–∞–Ω—Å %s %s.",
            "–ë–∞–ª–∞–Ω—Å –º–µ—Å—è—Ü–∞: %s %s.",
            "–í–∞—à –∏—Ç–æ–≥ –ø–æ –±–∞–ª–∞–Ω—Å—É: %s %s.",
            "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: %s %s."
    );
    private static final List<String> TIPS = List.of(
            "–°–∞–º–∞—è –∫—Ä—É–ø–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî %s. –°–æ–≤–µ—Ç: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑–∞—Ä–∞–Ω–µ–µ!",
            "–í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî %s. –ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ –ø–æ–∏—Å–∫–∞—Ç—å –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏?",
            "–¢—Ä–∞—Ç—ã –Ω–∞ %s –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–¥–µ–ª—é –±–µ–∑ —Ç—Ä–∞—Ç –Ω–∞ %s ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç!",
            "üí° –ü–æ–º–Ω–∏—Ç–µ: –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî –≤–∞—à –ø—É—Ç—å –∫ –±–æ–ª—å—à–∏–º —Ü–µ–ª—è–º!"
    );
    private static final List<String> ADVICE = List.of(
            "üòâ –î–µ—Ä–∂–∏—Ç–µ—Å—å –∫—É—Ä—Å–∞ ‚Äî –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –±–æ–ª—å—à–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
            "üöÄ –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü ‚Äî –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞!"
    );

    public FinanceAnalyzeResponse quickAnalyze(int year, int month, String currency) {
        if (currency == null || currency.isBlank()) currency = "KZT";
        String symbol = CurrencyUtil.getSymbol(currency);

        UserEntity user = userService.getCurrentUser();
        YearMonth ym = YearMonth.of(year, month);
        LocalDateTime from = ym.atDay(1).atStartOfDay();
        LocalDateTime to = ym.plusMonths(1).atDay(1).atStartOfDay();

        List<TransactionEntity> txs = transactionRepository.findAllByUserIdAndMonth(user.getId(), from, to);

        if (txs.isEmpty()) {
            return new FinanceAnalyzeResponse(
                    "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö. " +
                    "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑! üöÄ"
            );
        }

        BigDecimal income = getTotalByType(txs, TransactionType.INCOME);
        BigDecimal expense = getTotalByType(txs, TransactionType.EXPENSE);
        BigDecimal balance = income.subtract(expense);

        String topCategory = getTopExpenseCategory(txs);

        String greeting = String.format(
                GREETINGS.get(rnd.nextInt(GREETINGS.size())),
                ym.getMonth().getDisplayName(TextStyle.FULL, Locale.forLanguageTag("ru")), ym.getYear());

        String balanceComment = String.format(
                BALANCE_COMMENTS.get(rnd.nextInt(BALANCE_COMMENTS.size())),
                balance.setScale(2, RoundingMode.DOWN), symbol);

        String tip = String.format(
                TIPS.get(rnd.nextInt(TIPS.size())),
                topCategory);

        String advice = ADVICE.get(rnd.nextInt(ADVICE.size()));

        String result = String.join("\n",
                greeting,
                balanceComment,
                String.format("–î–æ—Ö–æ–¥—ã: %s %s | –†–∞—Å—Ö–æ–¥—ã: %s %s",
                        income.setScale(2, RoundingMode.DOWN), symbol,
                        expense.setScale(2, RoundingMode.DOWN), symbol),
                tip,
                advice
        );

        log.info("QuickAnalyze for user {}: {}", user.getId(), result);

        return new FinanceAnalyzeResponse(result);
    }

    private BigDecimal getTotalByType(List<TransactionEntity> txs, TransactionType type) {
        return txs.stream()
                .filter(tx -> tx.getType() == type)
                .map(TransactionEntity::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

    private String getTopExpenseCategory(List<TransactionEntity> txs) {
        return txs.stream()
                .filter(tx -> tx.getType() == TransactionType.EXPENSE)
                .collect(Collectors.groupingBy(
                        tx -> tx.getCategory().getNameRu(),
                        Collectors.reducing(BigDecimal.ZERO, TransactionEntity::getAmount, BigDecimal::add)))
                .entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤");
    }
}
